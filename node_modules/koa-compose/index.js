'use strict'

const Promise = require('any-promise')

/**
 * Expose compositor.
 */

module.exports = compose

/**
 * Compose `middleware` returning
 * a fully valid middleware comprised
 * of all those which are passed.
 *
 * @param {Array} middleware
 * @return {Function}
 * @api public
 */

function compose(middleware) {
  // 错误判断 先写出来
  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')
  // 主要检验是不是函数
  for (const fn of middleware) {
    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')
  }

  /**
   * @param {Object} context
   * @return {Promise}
   * @api public
   */

  return function (context, next) {
    console.log('next');
    console.log(next);
    // last called middleware #
    let index = -1
    return dispatch(0) // 一直在这个 dispatch 原来就是这个东西
    function dispatch(i) {
      // console.log('i',i)
      // console.log('index',index)
      // debugger
      if (i <= index) return Promise.reject(new Error('next() called multiple times'))
      console.log('-----')
      index = i
      let fn = middleware[i]
      if (i === middleware.length) fn = next
      if (!fn) return Promise.resolve()
      try {
        // 每个中间件第一个参数都是会 context
        return Promise.resolve(fn(context, function next() {
          // return 1、await 后面是普通函数也ok，也会马上变成promise.resolve ,但是里面的异步不会同步执行
          // 这个return的作用就是为了能够让异步函数同步执行
          return dispatch(i + 1)
        }))
      } catch (err) {
        return Promise.reject(err)
      }
    }
  }
}
