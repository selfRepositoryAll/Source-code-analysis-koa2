
'use strict';

/**
 * Module dependencies.
 */

const isGeneratorFunction = require('is-generator-function');
const debug = require('debug')('koa:application');
const onFinished = require('on-finished');
const response = require('./response'); // 处理返回的数据
// 模块是同步加载是 执行的时候才会有
const compose = require('koa-compose');
const isJSON = require('koa-is-json');

const context = require('./context');// 上下文
const request = require('./request'); // 处理请求的
// common.js是同步加载;
const statuses = require('statuses');
const Cookies = require('cookies');
const accepts = require('accepts');
const Emitter = require('events');//node的模块 观察者模式
// only 还的
const assert = require('assert');
const Stream = require('stream');
const http = require('http');
const only = require('only');
const convert = require('koa-convert');
const deprecate = require('depd')('koa');

/**
 * Expose `Application` class.
 * Inherits from `Emitter.prototype`.继承于 
 */

module.exports = class Application extends Emitter {

  /**
   * Initialize a new `Application`.
   *
   * @api public
   */
  // this 是这个类的实例
  constructor() {
    // 主要是为了能够继承 父级的constructor
    super();

    this.proxy = false;
    this.middleware = [];
    // 子域名偏移
    this.subdomainOffset = 2;
    // 环境变量 生产环境
    //  process.env 是进程中的process中 env 
    this.env = process.env.NODE_ENV || 'development';
    // Object.create 就是为某个对象创建原型
    this.context = Object.create(context);
    this.request = Object.create(request);
    this.response = Object.create(response);
  }

  /**
   * Shorthand for:
   *
   *    http.createServer(app.callback()).listen(...)
   *
   * @param {Mixed} ...
   * @return {Server}
   * @api public
   */
  // 这样和写在 prototype.listen是一样的
  listen() {
    console.log('koa内部listen');
    // debug('listen');
    const server = http.createServer(this.callback());
    return server.listen.apply(server, arguments);
  }

  /**
   * Return JSON representation.
   * We only bother showing settings.
   *
   * @return {Object}
   * @api public
   */

  toJSON() {
    return only(this, [
      'subdomainOffset',
      'proxy',
      'env'
    ]);
  }

  /**
   * Inspect implementation.
   *
   * @return {Object}
   * @api public
   */

  inspect() {
    return this.toJSON();
  }

  /**
   * Use the given middleware `fn`.
   *
   * Old-style middleware will be converted.
   *
   * @param {Function} fn
   * @return {Application} self
   * @api public
   */

  use(fn) {
    if (typeof fn !== 'function') throw new TypeError('middleware must be a function!');
    if (isGeneratorFunction(fn)) {// deprecate 任何在cmd能打印出的东西都是基于log这个原生的其他的
      // 如果是 Generator 就提示以后要被删除
      deprecate('Support for generators will been removed in v3. ' +
        'See the documentation for examples of how to convert old middleware ' +
        'https://github.com/koajs/koa/tree/v2.x#old-signature-middleware-v1x');
      fn = convert(fn);
    }
    debug('use %s', fn._name || fn.name || '-');
    console.log(fn.name);
    this.middleware.push(fn);
    // this是Application 应用的实例
    // console.log('this===>',this)
    return this;
  }

  /**
   * Return a request handler callback
   * for node's native http server.
   *
   * @return {Function}
   * @api public
   */
  // listen() {
  // 	debug('listen');
  // 	const server = http.createServer(this.callback());
  // 	return server.listen.apply(server, arguments);
  // }
  callback() {
    debugger //this.middleware=[]
    console.log('>>>>>');
    console.log(this.middleware);
    console.log(this.middleware.length);
    const fn = compose(this.middleware);
    // fn 就是下面的函数
		/*function (context, next) {
			// last called middleware #
			let index = -1
			return dispatch(0)
			function dispatch (i) {
				if (i <= index) return Promise.reject(new Error('next() called multiple times'))
				index = i
				let fn = middleware[i]
				if (i === middleware.length) fn = next
				if (!fn) return Promise.resolve()
				try {
					return Promise.resolve(fn(context, function next () {
						return dispatch(i + 1)
					}))
				} catch (err) {
					return Promise.reject(err)
				}
			}
    }*/
    console.log('????????');
    console.log(this.listeners);
    /**
     * 这段代码和 events 模块有关系，那就的分析 node events模块的
     */
    if (!this.listeners('error').length) this.on('error', this.onerror);

    // EventEmitter.prototype.listeners = function listeners(type) {
    //   return _listeners(this, type, true);
    // };

    return (req, res) => { //req, res 最真的req，和res
      res.statusCode = 404;
      const ctx = this.createContext(req, res); //ctx 包含了req 和res的对象

      onFinished(res, ctx.onerror);
      fn(ctx).then(() => respond(ctx)).catch(ctx.onerror);
    };
  }

  /**
   * Initialize a new context.
   *
   * @api private
   */
  // createContext 穿件一个上下文
  createContext(req, res) {
    // this.context = Object.create(context);
    // 设置一个局部变量
    const context = Object.create(this.context);//Object.create 专门通过原型继承
    console.log('MMMMM');
    // console.log(context);
    console.log(this.request);
    const request = context.request = Object.create(this.request);
    console.log('request1');
    console.log(request);
    const response = context.response = Object.create(this.response);
    // this是当前 应用的实例 
    // console.log('lllll');
    // console.log(request.app);
    // console.log(response.app);

    // console.log(request.req);
    // console.log(response.res);

    // console.log(request.req);
    // console.log(response.res);

    // response.app  response.req response.res
    // request.app request.req request.res
    context.app = request.app = response.app = this;
    console.log('request11');
    console.log(request);
    // console.log('req');
    // console.log(req);
    context.req = request.req = response.req = req;
    console.log('request12');
    console.log(request);
    context.res = request.res = response.res = res;
    console.log('request2');
    console.log(request);
    request.ctx = response.ctx = context;

    request.response = response;
    console.log('request');
    console.log(request);
    response.request = request;

    context.onerror = context.onerror.bind(context);
    context.originalUrl = request.originalUrl = req.url;
    context.cookies = new Cookies(req, res, {
      keys: this.keys,
      secure: request.secure
    });
    context.accept = request.accept = accepts(req);
    context.state = {};
    return context;
  }

  /**
   * Default error handler.
   *
   * @param {Error} err
   * @api private
   */

  onerror(err) {
    assert(err instanceof Error, `non-error thrown: ${err}`);

    if (404 == err.status || err.expose) return;
    if (this.silent) return;

    const msg = err.stack || err.toString();
    console.error();
    console.error(msg.replace(/^/gm, '  '));
    console.error();
  }

};

/**
 * Response helper.
 */

function respond(ctx) {
  // allow bypassing koa
  if (false === ctx.respond) return;

  const res = ctx.res;
  if (!ctx.writable) return;

  let body = ctx.body;
  const code = ctx.status;

  // ignore body
  if (statuses.empty[code]) {
    // strip headers
    ctx.body = null;
    return res.end();
  }

  if ('HEAD' == ctx.method) {
    if (!res.headersSent && isJSON(body)) {
      ctx.length = Buffer.byteLength(JSON.stringify(body));
    }
    return res.end();
  }

  // status body
  if (null == body) {
    body = ctx.message || String(code);
    if (!res.headersSent) {
      ctx.type = 'text';
      ctx.length = Buffer.byteLength(body);
    }
    return res.end(body);
  }

  // responses
  if (Buffer.isBuffer(body)) return res.end(body);//可写流 只能是buffer或者是字符串  JSON.stringIfy() 这两个就可以了
  if ('string' == typeof body) return res.end(body);
  if (body instanceof Stream) return body.pipe(res); //  gulp 而是一种流 是一种可读流 需要监听两个事件 data 和end事件

  // body: json
  body = JSON.stringify(body);
  if (!res.headersSent) {
    ctx.length = Buffer.byteLength(body);
  }
  res.end(body);
}
